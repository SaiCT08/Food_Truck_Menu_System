package foodtruckmenusystem;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Sai
 */
public class OrderSelectionScreen extends javax.swing.JFrame {

    private String truckName;
    private DefaultComboBoxModel<String> menuModel; // Model for dropdown items
    private static double totalPrice = 0.0;
    private CircularLinkedList<String> menuItems = new CircularLinkedList<>();
    private static CircularLinkedList<String> cart = new CircularLinkedList<>();
    
    public OrderSelectionScreen(String truckName) {
        this.truckName = truckName;
        initComponents();
        
        // Initialize ComboBox with menu items
        menuModel = new DefaultComboBoxModel<>();
        itemComboBox.setModel(menuModel);
        
        try {
            loadMenuItems(truckName);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading menu items for " + truckName, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void loadMenuItems(String truckName) throws IOException {
        String mainCourseFile = "src/foodtruckmenusystem/" + truckName + "MainCourse.txt";
    String sidesFile = "src/foodtruckmenusystem/" + truckName + "Sides.txt";

    // Load main course items
    try (BufferedReader reader = new BufferedReader(new FileReader(mainCourseFile))) {
        String line;
        while ((line = reader.readLine()) != null) {
            if (line.startsWith("*")) {
                menuItems.add(line); // Add to Circular Linked List
            }
        }
    }

    // Load side items
    try (BufferedReader reader = new BufferedReader(new FileReader(sidesFile))) {
        String line;
        while ((line = reader.readLine()) != null) {
            if (line.startsWith("*")) {
                menuItems.add(line); // Add to Circular Linked List
            }
        }
    }

    // Populate the ComboBox using the Circular Linked List
    for (String item : menuItems) {
        menuModel.addElement(item);
    }
    }
    
    public static void addToCart(String customizedItem, double customizedPrice) 
    {
    // Add to Circular Linked List
    cart.add(customizedItem);

    // Update the cart display
    cartTextArea.append(customizedItem + "\n");
    
    totalPrice += customizedPrice; // Update total price
    totalPriceField.setText(String.format("$%.2f", totalPrice)); // Display total price
    }
    
    private String getItemDetails(String itemName, String truckName, String fileType) throws IOException {
    String filePath = "src/foodtruckmenusystem/" + truckName + fileType + ".txt";
    StringBuilder itemDetails = new StringBuilder();

    System.out.println("Looking for item: " + itemName); // Debugging
    System.out.println("File path: " + filePath);       // Debugging

    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
        String line;
        boolean itemFound = false;

        while ((line = reader.readLine()) != null) {
            line = line.trim();

            // Detect new item
            if (line.startsWith("*")) {
                // Check if this is the desired item
                String[] parts = line.substring(1).split(" "); // Remove the '*' and split by space
                String foundItemName = String.join(" ", Arrays.copyOf(parts, parts.length - 1)); // Extract name

                System.out.println("Found item name: " + foundItemName); // Debugging

                if (foundItemName.equalsIgnoreCase(itemName)) {
                    itemDetails.append(line.substring(1)).append("\n"); // Append name and price
                    itemFound = true;
                    System.out.println("Match found!"); // Debugging
                } else if (itemFound) {
                    break; // Stop parsing once the item is complete
                }
            } else if (itemFound) {
                // Append ingredients for the selected item
                itemDetails.append(line).append("\n");
            }
        }
    }

    // Check if item was found
    if (itemDetails.length() == 0) {
        throw new IOException("Item " + itemName + " not found in " + filePath);
    }
    System.out.println("Item details fetched:\n" + itemDetails);
    return itemDetails.toString();
}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        itemComboBox = new javax.swing.JComboBox<>();
        addToCartButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        cartTextArea = new javax.swing.JTextArea();
        ownerLoginButton = new javax.swing.JButton();
        totalPriceField = new javax.swing.JLabel();
        customizeItemButton = new javax.swing.JButton();
        placeOrderButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        itemComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        itemComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemComboBoxActionPerformed(evt);
            }
        });

        addToCartButton.setText("Add to Cart");
        addToCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartButtonActionPerformed(evt);
            }
        });

        cartTextArea.setEditable(false);
        cartTextArea.setColumns(20);
        cartTextArea.setRows(5);
        jScrollPane1.setViewportView(cartTextArea);

        ownerLoginButton.setText("Owner Login");
        ownerLoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ownerLoginButtonActionPerformed(evt);
            }
        });

        totalPriceField.setText("Total Price");

        customizeItemButton.setText("Customize Item");
        customizeItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customizeItemButtonActionPerformed(evt);
            }
        });

        placeOrderButton.setText("Place Order");
        placeOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(addToCartButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(customizeItemButton)
                        .addGap(74, 74, 74)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(itemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ownerLoginButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(totalPriceField)
                .addGap(108, 108, 108))
            .addGroup(layout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addComponent(placeOrderButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(itemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addToCartButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(customizeItemButton)
                                .addGap(34, 34, 34)))
                        .addComponent(ownerLoginButton)
                        .addGap(10, 10, 10)
                        .addComponent(placeOrderButton)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(totalPriceField)
                        .addGap(54, 54, 54))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemComboBoxActionPerformed

    private void addToCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartButtonActionPerformed
        String selectedItem = (String) itemComboBox.getSelectedItem();
    if (selectedItem != null) {
        cart.add(selectedItem); // Add to Circular Linked List
        cartTextArea.append(selectedItem + "\n"); // Update cart display

        // Extract and update total price
        String[] itemParts = selectedItem.split(" ");
        double price = Double.parseDouble(itemParts[itemParts.length - 1]);
        totalPrice += price;
        totalPriceField.setText(String.format("$%.2f", totalPrice));
    } else {
        JOptionPane.showMessageDialog(this, "No item selected!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_addToCartButtonActionPerformed

    private void ownerLoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ownerLoginButtonActionPerformed
        OwnerLoginScreen ownerLogin = new OwnerLoginScreen(truckName);
        ownerLogin.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ownerLoginButtonActionPerformed

    private void customizeItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customizeItemButtonActionPerformed
        String selectedItem = (String) itemComboBox.getSelectedItem();
    if (selectedItem == null) {
        JOptionPane.showMessageDialog(this, "Please select an item to customize!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Remove `*` if it exists
    if (selectedItem.startsWith("*")) {
        selectedItem = selectedItem.substring(1).trim();
    }

    // Remove the price (last word after the last space)
    int lastSpaceIndex = selectedItem.lastIndexOf(" ");
    if (lastSpaceIndex != -1) {
        selectedItem = selectedItem.substring(0, lastSpaceIndex).trim(); // Keep only the name
    }

    try {
        // determine if the item is a Main Course or a Side
        String fileType = selectedItem.startsWith("Side:") ? "Sides" : "MainCourse";

        // Fetch item details from the appropriate file
        String itemDetails = getItemDetails(selectedItem, truckName, fileType);

        // Open the Customize Item Screen with the selected item's details
        new CustomizeItemScreen(itemDetails, truckName).setVisible(true);
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error loading item details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_customizeItemButtonActionPerformed

    private void placeOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeOrderButtonActionPerformed
        if (cart.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Your cart is empty! Please add items before placing an order.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Generate a unique order number
    int orderNumber = (int) (Math.random() * 100000); // Random 5-digit number

    // Open the order summary screen
    new OrderSummaryScreen(cart, totalPrice, orderNumber).setVisible(true);

    // Clear the cart for a new order
    cart.clear();
    cartTextArea.setText("");
    totalPrice = 0.0;
    totalPriceField.setText("$0.00");
    }//GEN-LAST:event_placeOrderButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCartButton;
    private static javax.swing.JTextArea cartTextArea;
    private javax.swing.JButton customizeItemButton;
    private javax.swing.JComboBox<String> itemComboBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton ownerLoginButton;
    private javax.swing.JButton placeOrderButton;
    private static javax.swing.JLabel totalPriceField;
    // End of variables declaration//GEN-END:variables
}
