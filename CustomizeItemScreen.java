package foodtruckmenusystem;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import javax.swing.JOptionPane;

/**
 *
 * @author Matthew
 */
public class CustomizeItemScreen extends javax.swing.JFrame {
    
    private String itemDetails;
    private String itemName;
    private String truckName; // Store the truck name
    private double itemBasePrice; // Store base price
    private double customizedPrice; // Current price of the customized item
    private DoublyLinkedList<String> currentIngredients = new DoublyLinkedList<>();
    private DoublyLinkedList<String> availableIngredients = new DoublyLinkedList<>();
    /**
     * Creates new form CustomizeItemScreen
     */
    public CustomizeItemScreen(String itemDetails, String truckName) {
        this.itemDetails = itemDetails;
        this.truckName = truckName;
        
        initComponents();
        parseItemDetails();

    //customizedPrice = itemBasePrice; // Initialize customized price with base price
    updateCurrentIngredientsDisplay(); // Populate ingredients area
    updateCustomizedPriceDisplay();   // Show initial price
        
        try {
        loadIngredients(); // Load all available ingredients from the file
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error loading ingredients file for " + truckName, "Error", JOptionPane.ERROR_MESSAGE);
    }
    }
    
    private void loadIngredients() throws IOException {
    String ingredientsFile = "src/foodtruckmenusystem/" + truckName + "Ingredients.txt";

    try (BufferedReader reader = new BufferedReader(new FileReader(ingredientsFile))) {
        String line;
        while ((line = reader.readLine()) != null) {
            String[] parts = line.split("\\|"); // Use "|" as the delimiter
            if (parts.length == 2) {
                String ingredient = parts[0].trim(); // The first part is the ingredient name
                String price = parts[1].trim();     // The second part is the price
                availableIngredients.add(ingredient + " - $" + price); // Add to list with price
            }
        }
    }

    // Populate the ComboBox with the available ingredients
    updateAvailableIngredientsComboBox();
}
    private void updateAvailableIngredientsComboBox() {
    availableIngredientsComboBox.removeAllItems();
    for (String ingredient : availableIngredients) {
        availableIngredientsComboBox.addItem(ingredient); // Add to ComboBox
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private void updateCurrentIngredientsDisplay() {
    currentIngredientsTextArea.setText(""); // Clear the text area

    for (String ingredient : currentIngredients) {
        currentIngredientsTextArea.append(ingredient + "\n");
    }
}
    
    private void updateCustomizedPriceDisplay() {
    customizedPriceField.setText(String.format("$%.2f", customizedPrice)); // Display formatted price
}
    
    private void parseItemDetails() {
    String[] lines = itemDetails.split("\n");
    if (lines.length < 2) {
        throw new RuntimeException("Invalid item details format: " + itemDetails);
    }

    // Extract item name and price
    String[] nameAndPrice = lines[0].split(" ");
    this.itemName = String.join(" ", Arrays.copyOf(nameAndPrice, nameAndPrice.length - 1)); // Item name
    itemName1.setText(itemName);
    this.itemBasePrice = Double.parseDouble(nameAndPrice[nameAndPrice.length - 1]); // Item price

    // Extract default ingredients
    for (int i = 1; i < lines.length; i++) {
        currentIngredients.add(lines[i].trim()); // Add ingredients to the list
    }

    // Update UI components
    //updateCurrentIngredientsDisplay();
    //updateCustomizedPriceDisplay();
    this.customizedPrice = this.itemBasePrice;
}
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        itemName1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        currentIngredientsTextArea = new javax.swing.JTextArea();
        availableIngredientsComboBox = new javax.swing.JComboBox<>();
        addIngredientButton = new javax.swing.JButton();
        removeIngredientButton = new javax.swing.JButton();
        addToCartButton = new javax.swing.JButton();
        customizedPriceField = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        itemName1.setText("s");

        currentIngredientsTextArea.setEditable(false);
        currentIngredientsTextArea.setColumns(20);
        currentIngredientsTextArea.setRows(5);
        jScrollPane1.setViewportView(currentIngredientsTextArea);

        availableIngredientsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        availableIngredientsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableIngredientsComboBoxActionPerformed(evt);
            }
        });

        addIngredientButton.setText("Add Ingredient");
        addIngredientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addIngredientButtonActionPerformed(evt);
            }
        });

        removeIngredientButton.setText("Remove Ingredient");
        removeIngredientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeIngredientButtonActionPerformed(evt);
            }
        });

        addToCartButton.setText("Add to Cart");
        addToCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartButtonActionPerformed(evt);
            }
        });

        customizedPriceField.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addToCartButton)
                .addGap(75, 75, 75)
                .addComponent(customizedPriceField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(168, 168, 168))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(addIngredientButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(itemName1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(availableIngredientsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(removeIngredientButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(itemName1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addComponent(addIngredientButton)
                        .addGap(26, 26, 26)
                        .addComponent(removeIngredientButton)
                        .addGap(18, 18, 18)
                        .addComponent(addToCartButton)
                        .addGap(9, 9, 9))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(availableIngredientsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(customizedPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void availableIngredientsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availableIngredientsComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availableIngredientsComboBoxActionPerformed

    private void addIngredientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addIngredientButtonActionPerformed
        String selectedIngredient = (String) availableIngredientsComboBox.getSelectedItem();
    if (selectedIngredient == null || selectedIngredient.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please select an ingredient to add.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String ingredientName = selectedIngredient.split(" - ")[0]; // Extract name
    String ingredientPriceStr = selectedIngredient.split(" - ")[1].substring(1); // Extract price (remove $)
    double ingredientPrice = Double.parseDouble(ingredientPriceStr);

    if (currentIngredients.contains(ingredientName)) {
        JOptionPane.showMessageDialog(this, "Ingredient already added!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    currentIngredients.add(ingredientName); // Add ingredient
    customizedPrice += ingredientPrice;    // Update customized price
    updateCurrentIngredientsDisplay();     // Refresh ingredient list
    updateCustomizedPriceDisplay();        // Refresh price display
    }//GEN-LAST:event_addIngredientButtonActionPerformed

    private void removeIngredientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeIngredientButtonActionPerformed
        // Get selected ingredient
    String selectedIngredient = (String) availableIngredientsComboBox.getSelectedItem();
    if (selectedIngredient == null || selectedIngredient.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please select an ingredient to remove.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Extract ingredient name only
    String ingredientName = selectedIngredient.split(" - ")[0]; // Extract the name only

    // Check if the ingredient is in the currentIngredients list
    if (!currentIngredients.contains(ingredientName)) {
        JOptionPane.showMessageDialog(this, "Ingredient not found in the current list.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Remove the ingredient from the list
    currentIngredients.remove(ingredientName);

    // Refresh the display
    updateCurrentIngredientsDisplay();
    }//GEN-LAST:event_removeIngredientButtonActionPerformed

    private void addToCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartButtonActionPerformed
        // Combine item name and customized ingredients
    StringBuilder customizedItem = new StringBuilder(itemName + " with:\n");
    for (String ingredient : currentIngredients) {
        customizedItem.append("- ").append(ingredient).append("\n");
    }
    customizedItem.append("Price: ").append(String.format("$%.2f", customizedPrice)); // Add price

    // Add the customized item to the cart in PartA_OrderSelectionScreen
    OrderSelectionScreen.addToCart(customizedItem.toString(), customizedPrice);

    // Display success message and close screen
    JOptionPane.showMessageDialog(this, "Item added to cart!");
    this.dispose(); // Close the customize item screen
    }//GEN-LAST:event_addToCartButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addIngredientButton;
    private javax.swing.JButton addToCartButton;
    private javax.swing.JComboBox<String> availableIngredientsComboBox;
    private javax.swing.JTextArea currentIngredientsTextArea;
    private javax.swing.JLabel customizedPriceField;
    private javax.swing.JLabel itemName1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeIngredientButton;
    // End of variables declaration//GEN-END:variables
}
